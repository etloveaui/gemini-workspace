Claude Code CLI로 개발하는 새로운 시대: 터미널 속 AI 팀원 활용 가이드
jinicoding1개월 ago03 mins

개발자의 작업 방식이 달라지고 있습니다.
이제는 혼자 키보드에 파묻혀 버그와 씨름하던 시대가 아니라, AI와 함께 협업하며 더 빠르고, 더 똑똑하게 일하는 시대입니다.

2025년, 가장 똑똑한 팀원은 어쩌면 바로 터미널 속 Claude일지도 모릅니다.
Anthropic에서 개발한 Claude Code CLI는 커맨드라인 기반에서 강력한 AI 기능을 제공하여, 개발자들이 코드 작성, 테스트, 리뷰, 리팩터링을 더 빠르게 수행할 수 있게 도와줍니다.

이 글에서는 Claude Code CLI의 핵심 기능과 활용법을 실제 워크플로우 중심으로 정리해보았습니다. 이제 여러분의 터미널은 더 이상 혼자 일하는 공간이 아닙니다 — AI 팀원이 항상 대기 중입니다.

🧩 Part 1: 시작하기 — 설정, 세션, 그리고 컨텍스트 매직
1. ✅ 설치: 당신의 AI 사이드킥 호출하기
npm install -g @anthropic-ai/claude-code
이 명령어로 Claude Code CLI를 전역 설치합니다.
설치가 완료되면 어느 디렉터리에서든 Claude를 호출할 수 있어요. 브라우저 없이, 바로 터미널에서!

2. 🔔 환경 설정: Claude가 ‘딩~’ 하고 알려주게 만들기
claude config set --global preferredNotifChannel terminal_bell
Claude가 시간이 오래 걸리는 작업(예: 긴 코드 리뷰나 응답)을 마치면 터미널 벨 소리로 알림을 줍니다.
덕분에 다른 작업을 하다가도 Claude의 답변이 끝났는지 바로 알 수 있어요.

3. 💬 새로운 세션 시작하기
claude
이 명령어로 새로운 대화 세션을 시작합니다.
컨텍스트가 리셋된 상태이므로, 새 작업이나 새로운 질문을 할 때 적합합니다.
“어제의 버그는 잊고, 오늘의 코드에 집중”할 수 있어요.

4. 🔁 이전 대화 이어서 계속하기
claude --continue
# 또는
claude -c
가장 최근의 세션을 이어서 계속합니다.
컨텍스트(기억된 대화 내용)를 그대로 유지하므로, 다시 설명할 필요 없이 바로 이어서 작업할 수 있어요.

5. 📁 여러 프로젝트 오가기
claude --resume
# 또는
claude -r
이 명령어는 이전에 작업한 모든 세션 목록을 보여주고, 그중 하나를 선택해서 복귀할 수 있습니다.
즉, 프로젝트마다 각각의 Claude 인스턴스를 운영하는 것처럼 복수 프로젝트를 오가며 협업이 가능해요.

⚙️ Part 2: 핵심 워크플로우 — 일상 개발자를 위한 슬래시 명령어 모음
6. /init — Claude에게 프로젝트 ‘기억’을 심어주기
/init
이 명령어는 프로젝트 루트에 CLAUDE.md 파일을 생성합니다.
여기에 프로젝트의 구조, 의존성, 코딩 컨벤션 등을 정리해두면 Claude가 그것을 **프로젝트 맥락(메모리)**으로 인식합니다.

🧠 팁: CLAUDE.md를 쓰는 것도 Claude에게 시키면 됩니다.
예:

> generate a CLAUDE.md based on this repo
7. /clear — 컨텍스트 초기화
/clear
현재 세션의 컨텍스트(기억된 대화 내용)를 완전히 초기화합니다.
기존 세션을 종료하지 않고도 다른 작업으로 전환할 수 있어서 유용해요.

8. /compact — 대화 요약으로 토큰 절약하기
/compact
Claude가 지금까지의 대화를 요약하여 컨텍스트를 압축해줍니다.
이렇게 하면 토큰 한도에 걸리지 않고 더 오래, 더 많이 대화할 수 있어요.
(마치 AI가 회의록을 대신 정리해주는 느낌!)

9. /review — 즉석 코드 리뷰
/review
Claude에게 코드 리뷰를 요청하면, PR, 파일, 코드 블록을 검사해 다음을 제공해줍니다:

버그 탐지
스타일 검사
성능 피드백
⏱ 수 초 만에 피드백을 받을 수 있어서 리뷰 속도가 훨씬 빨라집니다.

10. /help — 내장된 치트 시트
/help
Claude가 제공하는 모든 슬래시 명령어 목록과 설명을 보여줍니다.
문서를 찾아볼 필요 없이, 이 명령어 하나면 충분합니다.

11. /model — 모델 전환하기 (Opus vs Sonnet)
/model
Claude에는 두 가지 모델이 있습니다:

Opus: 더 깊고 정교한 사고가 필요한 경우
Sonnet: 빠른 응답 속도가 필요한 경우
/model 명령으로 두 모델을 세션 중간에 실시간 전환할 수 있어요.

🧠 Part 3: 프로젝트 마스터하기 — 어떤 코드베이스든 빠르게 이해하기
12. > summarize this project
> summarize this project
프로젝트 전체를 요약해 상위 수준의 개요를 제공합니다.

주요 기능은 무엇인지
구조가 어떻게 짜여 있는지
어떤 목적의 프로젝트인지 등
👋 새로운 레포에 처음 들어갈 때나 오픈소스 탐색에 아주 유용합니다.

13. > explain the folder structure
> explain the folder structure
프로젝트의 디렉토리 트리를 분석해 각 폴더에 무슨 역할의 코드가 들어 있는지 설명해줍니다.
복잡한 폴더 구조도 한눈에 파악할 수 있어요.

14. > find the files that handle user authentication
> find the files that handle user authentication
예를 들어 사용자 인증 관련 코드가 어디 있는지 Claude에게 물으면,
해당 기능을 담당하는 파일 경로나 코드 위치를 추적해줍니다.

🎯 마치 grep 명령어에 AI 건축 설계 능력이 추가된 느낌입니다.

15. > explain the main architecture patterns used here
> explain the main architecture patterns used here
Claude는 이 프로젝트에서 사용된 주요 아키텍처 패턴(예: MVC, Clean Architecture 등)을 설명해줍니다.
덕분에 기존 스타일과 일관되게 코드 작성이 가능해집니다.

🧰 Part 4: 고급 무기고 — 파워 유저를 위한 기능들
16. 🛠️ 커스텀 슬래시 명령어 만들기
.claude/commands 디렉터리에 마크다운 파일을 만들면,
나만의 슬래시 명령어를 정의할 수 있어요.

예시:
.claude/commands/test.md 파일 내용:

Run all the unit tests and report the results.
이제 아래와 같이 실행할 수 있습니다:

/project:test
📌 테스트 실행, 배포, 보일러플레이트 생성 등 반복 작업을 자동화하는 데 딱입니다.

17. 🌐 claude mcp add: AI에 초능력 추가하기
claude mcp add playwright npx @playwright/mcp@latest
위 명령어로 Claude에 Playwright MCP 플러그인을 추가하면 Claude가 실제로 브라우저를 제어할 수 있습니다.

예를 들면:

로그인 자동화
스크린샷 찍기
E2E 테스트 수행 등
🎯 자동 브라우저 테스트를 Claude에게 시켜보세요.

18. 🔐 권한 관리 — Claude에 허용/차단할 명령어 지정
.claude/settings.json에서 특정 명령어에 대해:

허용(permission.allow)
차단(permission.deny)
을 설정할 수 있습니다.

또는 정말 필요하다면:

--dangerously-skip-permissions
를 통해 권한 체크를 무시하고 실행할 수도 있어요. (⚠️ 사용 주의!)

19. 📊 토큰 사용량 추적
npx ccusage@latest
현재 Claude 사용으로 얼마나 많은 토큰을 소비했는지 확인할 수 있습니다.

예상 비용 계산
프롬프트 최적화
AI 사용량 예산 관리
를 할 때 매우 유용해요.

20. 🧠 > ultrathink: Claude의 ‘딥 브레인스토밍’ 모드
> ultrathink how to design a scalable real-time chat application
ultrathink 명령은 Claude에게 깊이 있는, 다단계 구조의 사고를 하도록 요청합니다.
전략, 설계, 구성요소까지 고수 수준의 설계 사고를 제공합니다.

📌 화이트보드 세션을 AI 아키텍트와 함께 하는 느낌이에요.

🤖 Part 5: 에이전트형 워크플로우 — Claude를 진짜 개발 팀원처럼 활용하기
✅ Claude와 함께하는 테스트 주도 개발 (TDD)
Claude를 활용하면 TDD(Test-Driven Development)도 자연스럽고 빠르게 할 수 있어요:

> write a failing test for the new feature
👉 기능에 대한 실패하는 테스트 작성 → 테스트 실행 → 실패 확인

> write the code to make the test pass
👉 기능 구현 코드 작성 → 테스트 재실행 → 성공 확인

> refactor the code for clarity and efficiency
👉 Claude에게 리팩터링 요청 → 더 깔끔하고 효율적인 코드로 개선

🧪 Claude는 테스트 코드와 기능 구현 코드 모두 작성 가능하므로, 테스트 작성의 부담이 크게 줄어듭니다.

🧠 Claude 인스턴스 다중 활용하기
Claude는 여러 개의 인스턴스를 동시에 열어 작업을 병렬화할 수 있어요.
예를 들어:

Instance 1: 기능 코드 작성
Instance 2: 코드 리뷰 수행
Instance 3: 피드백 반영하여 리팩터링
🎯 마치 작은 AI 팀과 함께 협업하는 것 같은 효과를 얻을 수 있습니다.
서로 다른 Claude에게 역할을 나눠주면, 더 빠르고, 더 정제된 개발이 가능합니다.

✅ 전체 요약
Claude는 단순한 도우미가 아니라 대화형 개발 파트너입니다.
초기 설정부터 고급 자동화, 브레인스토밍까지 모든 개발 흐름을 에이전트 기반으로 전환할 수 있습니다.
혼자서 개발하지 마세요. Claude와 함께라면 팀처럼 일할 수 있어요.
Claude Code CLI는 단순한 개발 보조 도구가 아니라, 진짜 대화형 협업 파트너입니다.
여러분이 초보 개발자든, 베테랑이든 상관없습니다. 명령어 몇 줄과 간단한 지시만으로 Claude는 여러분의 워크플로우를 자동화하고, 코드 품질을 높이며, 반복 작업의 부담을 덜어줍니다.

개발의 미래는 에이전트 중심적이고, 대화 기반이며, 무엇보다도 즐거운 것입니다.
오늘 터미널을 열고 Claude와 대화를 시작해보세요.
코딩이 다시 즐거워질 것입니다.