– Claude Code Router와 함께하는 AI 모델 비용 절약 가이드

“Claude Code를 쓰고 싶은데… 모델 요금이 부담돼요.”

“GPT-4처럼 똑똑한데 공짜인 건 없을까요?”

이런 고민을 해보셨다면, 이번 글이 아주 유용할 거예요.

오늘은 **Claude Code Router(CC Router)**를 통해 무료 언어모델을 활용하면서도 Claude Code의 편리한 인터페이스를 그대로 누리는 방법을 소개할게요.

🧠 Claude Code Router란?

Claude Code Router는 **Claude Code의 명령어 기반 인터페이스(UI)**를 유지하면서,

백엔드 언어모델은 자유롭게 바꿔서 쓸 수 있도록 해주는 오픈소스 라우터예요.

즉, /think, /code, /search 같은 Claude 전용 명령어를 그대로 쓰면서도

실제 처리는 GPT-4, Kimi-K2, LLaMA3, DeepSeek, Gemma 같은 모델들이 수행할 수 있는 거죠.

💸 그런데 무료인가요?

정답은 **“사용하는 모델과 연결 방식에 따라 다르다”**입니다.

아래 표처럼 일부 모델은 완전 무료, 일부는 부분 무료, 그리고 일부는 유료예요.

✅ 무료로 사용할 수 있는 모델들

모델	제공처	특징
Kimi-K2	Groq	현재 완전 무료, 속도 매우 빠름
LLaMA 3	Groq / Ollama	고품질 LLM, 오픈소스
Gemma	Groq / Ollama	구글 오픈모델, 빠른 응답
DeepSeek Coder	Ollama	코드용 특화 모델
Mixtral	Ollama / Groq	균형잡힌 성능의 Mixture of Experts
👉 Groq와 Ollama는 무료 사용이 가능해요.

특히 Groq는 클라우드 기반, Ollama는 로컬 설치 기반이죠.

🔧 예시: 무료 모델만 사용하는 config.json

{

  “Providers”: [

    {

      “name”: “groq”,

      “baseUrl”: “https://api.groq.com/openai/v1”,

      “apiKey”: “YOUR_GROQ_API_KEY”

    }

  ],

  “Router”: {

    “default”: “groq,kimi”,

    “think”: “groq,kimi-k2”,

    “longContext”: “groq,llama3-70b”,

    “code”: “groq,deepseek-coder”

  }

}

/think → 빠른 응답이 중요한 추론에 Kimi-K2
/code → 코드 생성 작업엔 DeepSeek
/longContext → 긴 맥락 분석엔 LLaMA 3 70B
💡 Claude Code를 쓰는 듯한 경험이지만, 실제로는 무료 모델로 돌아가고 있다는 사실!

📦 Ollama까지 활용하면?

로컬 환경에서 Ollama를 설치하고 다음처럼 구성하면

인터넷 없이도 Claude Code 환경에서 AI 코딩이 가능해요.

ollama run llama3

config.json에서 baseUrl을 http://localhost:11434로 지정하면 끝입니다.

✨ 마무리하며

Claude Code Router를 쓰면, 다음과 같은 일들이 가능해집니다:

Claude Pro 구독 없이도 Claude Code 스타일 사용
OpenRouter, Groq, Ollama 등에서 무료 모델 선택
고비용 모델은 제한하고, 무료 또는 저비용 모델로 분산 처리
작업별로 최적 모델을 자동 선택하는 “스마트 라우팅”
✅ 팁:

무료 모델이라도 생각보다 성능이 좋습니다.

특히 Kimi-K2나 DeepSeek은 코드 작성에서도 좋은 평가를 받고 있어요.


네.
`config.json`은 **Claude CLI 실행 시 현재 작업 디렉터리(root)** 또는 **사용자 홈 디렉터리**에 두면 됩니다.

일반 우선순위:

1. 현재 디렉터리(`./config.json`)
2. 홈 디렉터리(`~/.config/claude/config.json` 또는 OS별 기본 경로)

Windows라면 보통:

```
C:\Users\<사용자명>\.config\claude\config.json
```

Linux/macOS라면:

```
~/.config/claude/config.json
```

`root` 폴더에 두는 것도 가능하지만, CLI가 항상 그 경로에서 실행된다는 보장은 없으니 **홈 디렉터리 경로**에 두는 게 안전합니다.

원하시면 제가 Windows에서 `config.json` 안전하게 두는 구조랑 샘플 내용까지 바로 만들어드릴까요?
