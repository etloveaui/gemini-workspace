# tasks.py (최종 완성본 v4.0 - runner.py 분리 및 안정화)
from invoke import task, Collection, Program
import os
import subprocess
from scripts.usage_tracker import log_usage
from scripts.runner import logged_run

# --- 핵심 태스크 (Core Tasks) ---
@task
def start(c):
    """[Intelligent Engine Start] 컨텍스트 엔진을 통해 세션을 시작하고 브리핑합니다."""
    log_usage('start', "task_start", description="Intelligent session started")
    print("Starting intelligent session...")
    
    print("  - Building context index...")
    build_context_index(c)

    print("  - Assembling context using the intelligent engine...")
    # prompt_builder.py를 직접 실행하여 출력을 캡처
    result = subprocess.run(
        ["python", "scripts/prompt_builder.py"],
        capture_output=True,
        text=True,  # 텍스트 모드로 실행
        check=True,
        encoding='utf-8' # 인코딩 명시
    )
    briefing = result.stdout

    print("\nSession Start Briefing (Generated by Context Engine)")
    print("-" * 50)
    print(briefing)
    print("-" * 50)

    print("  - Activating project tracking in .gitignore...")
    logged_run('start', c, r'powershell.exe -ExecutionPolicy Bypass -File .\scripts\toggle_gitignore.ps1')
    
    print("Intelligent session started successfully.")
    log_usage('start', "task_end", description="Intelligent session finished")

@task
def wip(c, message=""):
    """WIP 커밋을 생성합니다."""
    # PowerShell 스크립트 경로에 raw string을 사용하여 백슬래시 문제를 방지합니다.
    script_path = r'.\scripts\git-wip.ps1'
    # PowerShell 명령어 문자열을 안전하게 구성합니다.
    command = f'powershell.exe -ExecutionPolicy Bypass -File "{script_path}" -Message "{message}"'
    logged_run('wip', c, command)

@task
def end(c, task_id="general"):
    """[Session End] 세션 종료 프로세스를 자동화합니다."""
    log_usage('end', "task_start", description="Session end process started")
    print("Ending session...")
    
    print("  - Checking for uncommitted changes and creating WIP commit...")
    wip(c, message="WIP: Session End Backup")
    
    print("  - Restoring .gitignore...")
    logged_run('end', c, r'powershell.exe -ExecutionPolicy Bypass -File .\scripts\toggle_gitignore.ps1 -Restore')
    
    print("  - Updating __lastSession__ block in HUB.md...")
    logged_run('end', c, f"python scripts/hub_manager.py {task_id}")
    
    print("  - Creating final commit for session updates...")
    logged_run('end', c, "git add docs/HUB.md")
    wip(c, message="docs: Update HUB.md with session state")

    print("Session ended successfully. All records saved.")
    log_usage('end', "task_end", description="Session end process finished")

@task
def status(c):
    """[Status Check] 현재 워크스페이스의 Git 상태를 간략히 확인합니다."""
    print("Workspace Status:")
    logged_run('status', c, "git status --short")

# --- Context Sub-collection ---
@task(name="build")
def build_context_index(c):
    """워크스페이스의 컨텍스트 인덱스(index.json)를 생성하거나 업데이트합니다."""
    logged_run('context.build', c, "python scripts/build_context_index.py")

@task(name="query")
def query_context(c, query):
    """컨텍스트 인덱스에서 정보를 검색합니다. (테스트용)"""
    print(f"Querying context for: '{query}'")
    logged_run('context.query', c, f'python scripts/context_store.py "{query}"')

# --- 테스트 하네스 태스크 (Test Harness Task) ---
@task
def test(c):
    """/tests 폴더의 모든 pytest 케이스를 실행하여 시스템 신뢰도를 검증합니다."""
    log_usage('test', "task_start", description="Autonomous Test Harness started")
    print("Running Autonomous Test Harness...")
    logged_run('test', c, "pytest -v")
    log_usage('test', "task_end", description="Autonomous Test Harness finished")

# --- 네임스페이스 및 프로그램 정의 ---
ns = Collection()
ns.add_task(start)
ns.add_task(end)
ns.add_task(status)
ns.add_task(wip)
ns.add_task(test)

context_ns = Collection('context')
context_ns.add_task(build_context_index, name='build')
context_ns.add_task(query_context, name='query')
ns.add_collection(context_ns)

program = Program(namespace=ns)
