# tasks.py (최종 완성본 v3.0)
from invoke import task, Collection, Program
import os
import subprocess
from scripts.usage_tracker import log_usage

# --- 로깅 래퍼 (중앙 집중식 실행 함수) ---
def logged_run(c, command, **kwargs):
    """c.run()을 감싸서 실행 전후로 자동으로 로그를 남깁니다."""
    task_name = c.task.name if hasattr(c, 'task') and c.task else 'unknown_task' # Context 객체의 .name 속성으로 현재 태스크 이름을 가져옵니다.
    log_usage(task_name, "command_start", description=f"Executing: {command}")
    result = c.run(command, **kwargs)
    log_usage(task_name, "command_end", description=f"Completed: {command}")
    return result

# --- 핵심 태스크 (Core Tasks) ---
@task
def start(c):
    """[Intelligent Engine Start] 컨텍스트 엔진을 통해 세션을 시작하고 브리핑합니다."""
    log_usage(c.task.name, "task_start", description="Intelligent session started")
    print("Starting intelligent session...")
    print("  - Building context index...")
    build_context_index(c) # 함수 직접 호출

    print("  - Assembling context using the intelligent engine...")
    result = logged_run(c, "python scripts/prompt_builder.py", hide=True)
    briefing = result.stdout.decode('utf-8', errors='ignore')

    print("\nSession Start Briefing (Generated by Context Engine)")
    print("-" * 50)
    print(briefing)
    print("-" * 50)

    print("  - Activating project tracking in .gitignore...")
    logged_run(c, r"powershell.exe -ExecutionPolicy Bypass -File .\scripts\toggle_gitignore.ps1")
    print("Intelligent session started successfully.")
    log_usage(c.task.name, "task_end", description="Intelligent session finished")


@task
def wip(c, message=""):
    """WIP 커밋을 생성합니다."""
    logged_run(c, f'powershell.exe -ExecutionPolicy Bypass -File "scripts/git-wip.ps1" -Message "{message}"')

@task
def end(c, task_id="general"):
    """[Session End] 세션 종료 프로세스를 자동화합니다."""
    log_usage(c.task.name, "task_start", description="Session end process started")
    print("Ending session...")
    print("  - Checking for uncommitted changes and creating WIP commit...")
    wip(c)
    print("  - Restoring .gitignore...")
    logged_run(c, r"powershell.exe -ExecutionPolicy Bypass -File .\scripts\toggle_gitignore.ps1 -Restore")
    print("  - Updating __lastSession__ block in HUB.md...")
    logged_run(c, f"python scripts/hub_manager.py {task_id}")
    logged_run(c, "git add docs/HUB.md")
    print("  - Creating final commit for session updates...")
    wip(c)
    print("Session ended successfully. All records saved.")
    log_usage(c.task.name, "task_end", description="Session end process finished")


@task
def status(c):
    """[Status Check] 현재 워크스페이스의 Git 상태를 간략히 확인합니다."""
    print("Workspace Status:")
    logged_run(c.task.name, c, "git status --short")

# --- Context Sub-collection ---
@task(name="build")
def build_context_index(c):
    """워크스페이스의 컨텍스트 인덱스(index.json)를 생성하거나 업데이트합니다."""
    logged_run(c, r"python .\scripts\build_context_index.py")

@task(name="query")
def query_context(c, query):
    """컨텍스트 인덱스에서 정보를 검색합니다. (테스트용)"""
    print(f"Querying context for: '{query}'")
    logged_run(c, f'python scripts/context_store.py "{query}"')

# --- 테스트 하네스 태스크 (Test Harness Task) ---
@task
def test(c):
    """/tests 폴더의 모든 pytest 케이스를 실행하여 시스템 신뢰도를 검증합니다."""
    log_usage(c.task.name, "task_start", description="Autonomous Test Harness started")
    print("Running Autonomous Test Harness...")
    logged_run(c.task.name, c, "pytest -v")
    log_usage(c.task.name, "task_end", description="Autonomous Test Harness finished")

# --- 네임스페이스 및 프로그램 정의 ---
# 1. 최상위 네임스페이스(Collection) 생성
ns = Collection()

# 2. 기본 태스크들을 최상위 네임스페이스에 추가
ns.add_task(start)
ns.add_task(end)
ns.add_task(status)
ns.add_task(wip)
ns.add_task(test)

# 3. 'context'라는 하위 네임스페이스 생성
context_ns = Collection('context')

# 4. 하위 네임스페이스에 관련 태스크 추가
context_ns.add_task(build_context_index, name='build')
context_ns.add_task(query_context, name='query')

# 5. 최상위 네임스페이스에 하위 네임스페이스 추가
ns.add_collection(context_ns)

# 6. 프로그램 정의 (invoke가 실행할 대상)
program = Program(namespace=ns)
